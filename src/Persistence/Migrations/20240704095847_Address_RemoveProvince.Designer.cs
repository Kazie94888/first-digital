// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartCoinOS.Persistence;

#nullable disable

namespace SmartCoinOS.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240704095847_Address_RemoveProvince")]
    partial class Address_RemoveProvince
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartCoinOS.Domain.Application.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorizedUsers")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BankAccounts")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BusinessInfo")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<string>("Documents")
                        .HasColumnType("jsonb");

                    b.Property<string>("EntityParticulars")
                        .HasColumnType("jsonb");

                    b.Property<string>("FdtAccounts")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Wallets")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationNumber")
                        .IsUnique();

                    b.HasIndex("LegalEntityName")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.AuditLogs.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.AuthorizedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("AuthorizedUsers", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Beneficiary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("SmartTrustBank")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepositBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("Documents")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.EntityParticular", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryOfInc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateOnly>("DateOfIncorporation")
                        .HasColumnType("date");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LegalStructure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StructureDetails")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("EntityParticulars", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.FdtAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Alias")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("FdtAccounts", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("OrdersCount")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Deposit.DepositBank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Beneficiary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Swift")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("DepositBanks", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Deposit.DepositFdtAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DepositFdtAccounts", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Deposit.DepositWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DepositWallets", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepositBankId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepositFdtAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepositWalletId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FdtAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ProcessingStatus")
                        .HasColumnType("text");

                    b.Property<string>("RedeemTxHash")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("RsnReference")
                        .HasColumnType("jsonb");

                    b.Property<string>("SafeTxHash")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Signatures")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("FdtAccountId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("Orders", (string)null);

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.OrderDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDocuments", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Shared.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("State")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Shared.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationDocumentType")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientDocumentType")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CurrentVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("SmartCoinOS.Persistence.Entities.ApplicationSettings", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("Settings", "settings", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.MintOrder", b =>
                {
                    b.HasBaseType("SmartCoinOS.Domain.Orders.Order");

                    b.HasDiscriminator().HasValue("Mint");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.RedeemOrder", b =>
                {
                    b.HasBaseType("SmartCoinOS.Domain.Orders.Order");

                    b.HasDiscriminator().HasValue("Redeem");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.AuditLogs.AuditLog", b =>
                {
                    b.OwnsMany("SmartCoinOS.Domain.AuditLogs.AuditLogParameter", "Parameters", b1 =>
                        {
                            b1.Property<Guid>("AuditLogId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AuditLogId", "Id");

                            b1.ToTable("AuditLogs");

                            b1.ToJson("Parameters");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogId");
                        });

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.AuthorizedUser", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Clients.Client", null)
                        .WithMany("AuthorizedUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.BankAccount", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Shared.Address", "Address")
                        .WithOne()
                        .HasForeignKey("SmartCoinOS.Domain.Clients.BankAccount", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartCoinOS.Domain.Clients.Client", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.Client", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Shared.Address", "Address")
                        .WithOne()
                        .HasForeignKey("SmartCoinOS.Domain.Clients.Client", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartCoinOS.Domain.Clients.CompanyContact", "Contact", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ContactEmail");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Contact")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.EntityParticular", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Clients.Client", null)
                        .WithMany("EntityParticulars")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.FdtAccount", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Clients.Client", null)
                        .WithMany("FdtAccounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.Wallet", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Clients.Client", null)
                        .WithMany("Wallets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartCoinOS.Domain.Clients.WalletAccount", "WalletAccount", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Network")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallets");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.Navigation("WalletAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Deposit.DepositBank", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Deposit.DepositWallet", b =>
                {
                    b.OwnsOne("SmartCoinOS.Domain.Clients.WalletAccount", "Account", b1 =>
                        {
                            b1.Property<Guid>("DepositWalletId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Network")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DepositWalletId");

                            b1.ToTable("DepositWallets");

                            b1.WithOwner()
                                .HasForeignKey("DepositWalletId");
                        });

                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.Order", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Clients.BankAccount", null)
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartCoinOS.Domain.Clients.FdtAccount", null)
                        .WithMany()
                        .HasForeignKey("FdtAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartCoinOS.Domain.Clients.Wallet", null)
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("SmartCoinOS.Domain.Orders.Money", "ActualAmount", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("ActualAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ActualCurrency");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("SmartCoinOS.Domain.Orders.Instruction", "DepositInstruction", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<string>("ReferenceNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("SmartCoinOS.Domain.Orders.Money", "DepositedAmount", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("DepositAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("DepositCurrency");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("SmartCoinOS.Domain.Orders.Money", "OrderedAmount", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("OrderedAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("OrderedCurrency");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("SmartCoinOS.Domain.Orders.Instruction", "PaymentInstruction", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<string>("ReferenceNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ActualAmount");

                    b.Navigation("DepositInstruction");

                    b.Navigation("DepositedAmount");

                    b.Navigation("OrderedAmount")
                        .IsRequired();

                    b.Navigation("PaymentInstruction");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.OrderDocument", b =>
                {
                    b.HasOne("SmartCoinOS.Domain.Orders.Order", null)
                        .WithMany("Documents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Clients.Client", b =>
                {
                    b.Navigation("AuthorizedUsers");

                    b.Navigation("BankAccounts");

                    b.Navigation("EntityParticulars");

                    b.Navigation("FdtAccounts");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SmartCoinOS.Domain.Orders.Order", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
